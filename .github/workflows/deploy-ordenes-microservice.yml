name: Deploy Ordenes Service

on:
  push:
    branches:
      - main

env:
  SERVICE_NAME: ordenes-service
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/ordenes-service
  K8S_DIR: kubernetes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test
        run: |
          mvn clean package
          mvn test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:latest

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      - name: Start Minikube
        run: |
          minikube start --driver=docker
          minikube addons enable ingress
          minikube addons enable metrics-server

      - name: Deploy to Minikube
        run: |
          # Configurar el entorno de Docker de Minikube
          eval $(minikube -p minikube docker-env)
          # Construir la imagen en el entorno de Minikube
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          # Reemplazar variables en los archivos de Kubernetes
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          # Aplicar los manifiestos de Kubernetes
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          
          # Logs detallados para diagnóstico
          echo "=== Estado inicial de los pods ==="
          kubectl get pods -l app=${{ env.SERVICE_NAME }}
          
          echo "=== Información detallada del deployment ==="
          kubectl describe deployment ${{ env.SERVICE_NAME }}-deployment
          
          echo "=== Información detallada de los pods ==="
          kubectl describe pods -l app=${{ env.SERVICE_NAME }}
          
          echo "=== Logs del kubelet (si están disponibles) ==="
          kubectl logs -n kube-system kube-apiserver-minikube --tail=50 || echo "No se pueden obtener logs del kubelet"
          
          echo "=== Estado de los nodos ==="
          kubectl describe nodes
          
          echo "=== Información de recursos del cluster ==="
          kubectl top nodes || echo "Metrics server no disponible"
          kubectl top pods || echo "No hay pods para mostrar métricas"
          
          # Esperar un poco y mostrar logs de los pods si están disponibles
          echo "=== Esperando 30 segundos para ver si los pods se crean ==="
          sleep 30
          
          echo "=== Estado de los pods después de 30 segundos ==="
          kubectl get pods -l app=${{ env.SERVICE_NAME }} -o wide
          
          echo "=== Intentando obtener logs de los pods ==="
          for pod in $(kubectl get pods -l app=${{ env.SERVICE_NAME }} -o jsonpath='{.items[*].metadata.name}'); do
            echo "--- Logs del pod: $pod ---"
            kubectl logs $pod --tail=50 || echo "No se pueden obtener logs del pod $pod"
          done
          
          echo "=== Información detallada de los pods después de 30 segundos ==="
          kubectl describe pods -l app=${{ env.SERVICE_NAME }}
          
          # Esperar a que el despliegue esté listo con más tiempo y logs
          echo "=== Esperando a que el deployment esté listo ==="
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=300s

      - name: Verify deployment
        run: |
          # Mostrar estado final
          echo "=== Estado final de los pods ==="
          kubectl get pods -l app=${{ env.SERVICE_NAME }} -o wide
          
          echo "=== Información final del deployment ==="
          kubectl describe deployment ${{ env.SERVICE_NAME }}-deployment
          
          # Intentar obtener logs de los pods que estén ejecutándose
          echo "=== Logs finales de los pods ==="
          for pod in $(kubectl get pods -l app=${{ env.SERVICE_NAME }} -o jsonpath='{.items[*].metadata.name}'); do
            echo "--- Logs finales del pod: $pod ---"
            kubectl logs $pod --tail=100 || echo "No se pueden obtener logs del pod $pod"
          done
          
          # Esperar a que el servicio esté listo
          sleep 30
          # Obtener la IP de Minikube
          MINIKUBE_IP=$(minikube ip)
          echo "=== IP de Minikube: $MINIKUBE_IP ==="
          
          # Verificar health endpoint
          echo "=== Verificando health endpoint ==="
          curl -v http://$MINIKUBE_IP:30082/actuator/health || echo "Health endpoint no disponible"
          
          # Verificar prometheus endpoint
          echo "=== Verificando prometheus endpoint ==="
          curl -v http://$MINIKUBE_IP:30082/actuator/prometheus | head -n 5 || echo "Prometheus endpoint no disponible"

      - name: Cleanup
        if: always()
        run: |
          echo "=== Limpiando recursos ==="
          minikube stop
          minikube delete